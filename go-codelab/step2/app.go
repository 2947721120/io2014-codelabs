//  Package todo is an App Engine app providing a REST API to manage todo
//  lists.
//
//  The REST API provides the following handlers:
//
//  /api/lists GET
//    Gets all the list names and ids and creators if no user is logged in.
//    If the user is logged in, only their lists.
//  /api/lists POST
//    Creates a new list.
//
package todo

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"

	"github.com/gorilla/mux"

	"appengine"
	"appengine/datastore"
)

// datastore entity kind for List
const listKind = "List"

// List represents a lists of tasks.
type List struct {
	// Autogenerated id, not stored in the datastore.
	ID string `datastore:"-"`

	Name string // Name of the list
}

func init() {
	// Register all the handlers.
	r := mux.NewRouter().PathPrefix("/api/").Subrouter()

	// List management
	r.Handle("/list", appHandler(getAllLists)).Methods("GET")
	r.Handle("/list", appHandler(createList)).Methods("POST")

	http.Handle("/api/", r)
}

// getAllLists fetches all the lists in the datastore and encodes them
// in JSON format into the http response.
func getAllLists(w io.Writer, r *http.Request) error {
	c := appengine.NewContext(r)

	lists := []List{}
	keys, err := datastore.NewQuery(listKind).GetAll(c, &lists)
	if err != nil {
		return fmt.Errorf("fetch all lists: %v", err)
	}

	// Update the encoded keys and encode the lists.
	for i, k := range keys {
		lists[i].ID = k.Encode()
	}
	return json.NewEncoder(w).Encode(lists)
}

// createList creates a new list. It reads a JSON encoded list from the request
// body.
func createList(w io.Writer, r *http.Request) error {
	return errors.New("createList not implemented")

	// Create an empty List.
	// Create a JSON decoder and decode a JSON object from the request's
	// body into the created List.
	// - json.Decoder: http://golang.org/pkg/encoding/json#Decoder
	// - http.Request: http://golang.org/pkg/net/http#Request

	// Check that the decoded list has a non empty name and return an appError
	// with http.StatusBadRequest error code.

	// Create a new incomplete key of kind listKind.
	// Put the List in the datastore with the incomplete key.
	// - datastore.Key: http://golang.org/s/datastore#Key
	// - datastore.Put: http://golang.org/s/datastore#Put

	// Encode the key returned by the the datastore into the list's ID field.
	// - datastore.Key.Encode: http://golang.org/s/datastore#Key.Encode

	// Create a JSON encoder and encode the list into the provided io.Writer.
	// If encoding the list fails return the error.
	// - json.Encoder: http://golang.org/pkg/encoding/json#Encoder
}
